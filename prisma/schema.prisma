// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          Role      @default(USER)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      // Rich text content
  excerpt     String?     // Short description
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  views       Int         @default(0)
  readingTime Int?        // Estimated minutes
  coverImage  String?     // Featured image
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId   String
  author     User        @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category?   @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String? // For UI theming
  
  posts Post[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String?
  user   User?  @relation(fields: [userId], references: [id])
  
  // For guest comments
  guestName  String?
  guestEmail String?
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  subscribed  Boolean  @default(true)
  subscribedAt DateTime @default(now())
}



// Added missing Account model
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


// Added missing Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum Role {
  USER
  ADMIN
}


